// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Supabase –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ Transfer Assistant

import { ChatSessionService } from './src/services/chatSessionService';

// –ü—Ä–∏–º–µ—Ä 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
async function createNewChatSession() {
  console.log('üöÄ Creating new chat session...');
  
  const chatService = new ChatSessionService('user-123');
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  const sessionId = await chatService.createSession('I need a transfer from Paris to London');
  console.log('‚úÖ Session created:', sessionId);
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
  await chatService.addMessage(sessionId, 'I need a transfer from Paris to London', 'user');
  await chatService.addMessage(sessionId, 'I can help you with that! When do you need to travel?', 'assistant');
  await chatService.addMessage(sessionId, 'Tomorrow at 2 PM', 'user');
  await chatService.addMessage(sessionId, 'Perfect! How many passengers?', 'assistant');
  
  console.log('‚úÖ Messages added to session');
  
  return sessionId;
}

// –ü—Ä–∏–º–µ—Ä 2: –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
async function loadChatHistory(sessionId: string) {
  console.log('üìñ Loading chat history...');
  
  const chatService = new ChatSessionService('user-123');
  const messages = await chatService.getSessionMessages(sessionId);
  
  console.log('üìù Chat history:');
  messages.forEach((msg, index) => {
    console.log(`  ${index + 1}. [${msg.sender_type}] ${msg.content}`);
  });
  
  return messages;
}

// –ü—Ä–∏–º–µ—Ä 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserSessions() {
  console.log('üë§ Getting user sessions...');
  
  const chatService = new ChatSessionService('user-123');
  const sessions = await chatService.getUserSessions();
  
  console.log('üìã User sessions:');
  sessions.forEach((session, index) => {
    console.log(`  ${index + 1}. Session ${session.id} - ${session.first_message}`);
  });
  
  return sessions;
}

// –ü—Ä–∏–º–µ—Ä 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API
async function sendMessageToAPI(message: string, sessionId?: string) {
  console.log('üåê Sending message to API...');
  
  const response = await fetch('/api/process-message', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      message: message,
      userLanguage: 'en',
      sessionId: sessionId,
      userId: 'user-123'
    })
  });
  
  if (!response.ok) {
    throw new Error(`API error: ${response.status}`);
  }
  
  const result = await response.json();
  console.log('‚úÖ API response:', result);
  
  return result;
}

// –ü—Ä–∏–º–µ—Ä 5: –ü–æ–ª–Ω—ã–π workflow
async function fullWorkflow() {
  try {
    console.log('üéØ Starting full workflow...');
    
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    const sessionId = await createNewChatSession();
    
    // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    const apiResult = await sendMessageToAPI('I need 2 passengers and 1 suitcase', sessionId);
    console.log('‚úÖ API processed message:', apiResult.response);
    
    // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    await loadChatHistory(sessionId);
    
    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await getUserSessions();
    
    console.log('üéâ Full workflow completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Workflow failed:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export {
  createNewChatSession,
  loadChatHistory,
  getUserSessions,
  sendMessageToAPI,
  fullWorkflow
};

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  fullWorkflow();
}
